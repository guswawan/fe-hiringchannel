{"ast":null,"code":"var characterMap = {\n  \"À\": \"A\",\n  \"Á\": \"A\",\n  \"Â\": \"A\",\n  \"Ã\": \"A\",\n  \"Ä\": \"A\",\n  \"Å\": \"A\",\n  \"Ấ\": \"A\",\n  \"Ắ\": \"A\",\n  \"Ẳ\": \"A\",\n  \"Ẵ\": \"A\",\n  \"Ặ\": \"A\",\n  \"Æ\": \"AE\",\n  \"Ầ\": \"A\",\n  \"Ằ\": \"A\",\n  \"Ȃ\": \"A\",\n  \"Ç\": \"C\",\n  \"Ḉ\": \"C\",\n  \"È\": \"E\",\n  \"É\": \"E\",\n  \"Ê\": \"E\",\n  \"Ë\": \"E\",\n  \"Ế\": \"E\",\n  \"Ḗ\": \"E\",\n  \"Ề\": \"E\",\n  \"Ḕ\": \"E\",\n  \"Ḝ\": \"E\",\n  \"Ȇ\": \"E\",\n  \"Ì\": \"I\",\n  \"Í\": \"I\",\n  \"Î\": \"I\",\n  \"Ï\": \"I\",\n  \"Ḯ\": \"I\",\n  \"Ȋ\": \"I\",\n  \"Ð\": \"D\",\n  \"Ñ\": \"N\",\n  \"Ò\": \"O\",\n  \"Ó\": \"O\",\n  \"Ô\": \"O\",\n  \"Õ\": \"O\",\n  \"Ö\": \"O\",\n  \"Ø\": \"O\",\n  \"Ố\": \"O\",\n  \"Ṍ\": \"O\",\n  \"Ṓ\": \"O\",\n  \"Ȏ\": \"O\",\n  \"Ù\": \"U\",\n  \"Ú\": \"U\",\n  \"Û\": \"U\",\n  \"Ü\": \"U\",\n  \"Ý\": \"Y\",\n  \"à\": \"a\",\n  \"á\": \"a\",\n  \"â\": \"a\",\n  \"ã\": \"a\",\n  \"ä\": \"a\",\n  \"å\": \"a\",\n  \"ấ\": \"a\",\n  \"ắ\": \"a\",\n  \"ẳ\": \"a\",\n  \"ẵ\": \"a\",\n  \"ặ\": \"a\",\n  \"æ\": \"ae\",\n  \"ầ\": \"a\",\n  \"ằ\": \"a\",\n  \"ȃ\": \"a\",\n  \"ç\": \"c\",\n  \"ḉ\": \"c\",\n  \"è\": \"e\",\n  \"é\": \"e\",\n  \"ê\": \"e\",\n  \"ë\": \"e\",\n  \"ế\": \"e\",\n  \"ḗ\": \"e\",\n  \"ề\": \"e\",\n  \"ḕ\": \"e\",\n  \"ḝ\": \"e\",\n  \"ȇ\": \"e\",\n  \"ì\": \"i\",\n  \"í\": \"i\",\n  \"î\": \"i\",\n  \"ï\": \"i\",\n  \"ḯ\": \"i\",\n  \"ȋ\": \"i\",\n  \"ð\": \"d\",\n  \"ñ\": \"n\",\n  \"ò\": \"o\",\n  \"ó\": \"o\",\n  \"ô\": \"o\",\n  \"õ\": \"o\",\n  \"ö\": \"o\",\n  \"ø\": \"o\",\n  \"ố\": \"o\",\n  \"ṍ\": \"o\",\n  \"ṓ\": \"o\",\n  \"ȏ\": \"o\",\n  \"ù\": \"u\",\n  \"ú\": \"u\",\n  \"û\": \"u\",\n  \"ü\": \"u\",\n  \"ý\": \"y\",\n  \"ÿ\": \"y\",\n  \"Ā\": \"A\",\n  \"ā\": \"a\",\n  \"Ă\": \"A\",\n  \"ă\": \"a\",\n  \"Ą\": \"A\",\n  \"ą\": \"a\",\n  \"Ć\": \"C\",\n  \"ć\": \"c\",\n  \"Ĉ\": \"C\",\n  \"ĉ\": \"c\",\n  \"Ċ\": \"C\",\n  \"ċ\": \"c\",\n  \"Č\": \"C\",\n  \"č\": \"c\",\n  \"C̆\": \"C\",\n  \"c̆\": \"c\",\n  \"Ď\": \"D\",\n  \"ď\": \"d\",\n  \"Đ\": \"D\",\n  \"đ\": \"d\",\n  \"Ē\": \"E\",\n  \"ē\": \"e\",\n  \"Ĕ\": \"E\",\n  \"ĕ\": \"e\",\n  \"Ė\": \"E\",\n  \"ė\": \"e\",\n  \"Ę\": \"E\",\n  \"ę\": \"e\",\n  \"Ě\": \"E\",\n  \"ě\": \"e\",\n  \"Ĝ\": \"G\",\n  \"Ǵ\": \"G\",\n  \"ĝ\": \"g\",\n  \"ǵ\": \"g\",\n  \"Ğ\": \"G\",\n  \"ğ\": \"g\",\n  \"Ġ\": \"G\",\n  \"ġ\": \"g\",\n  \"Ģ\": \"G\",\n  \"ģ\": \"g\",\n  \"Ĥ\": \"H\",\n  \"ĥ\": \"h\",\n  \"Ħ\": \"H\",\n  \"ħ\": \"h\",\n  \"Ḫ\": \"H\",\n  \"ḫ\": \"h\",\n  \"Ĩ\": \"I\",\n  \"ĩ\": \"i\",\n  \"Ī\": \"I\",\n  \"ī\": \"i\",\n  \"Ĭ\": \"I\",\n  \"ĭ\": \"i\",\n  \"Į\": \"I\",\n  \"į\": \"i\",\n  \"İ\": \"I\",\n  \"ı\": \"i\",\n  \"Ĳ\": \"IJ\",\n  \"ĳ\": \"ij\",\n  \"Ĵ\": \"J\",\n  \"ĵ\": \"j\",\n  \"Ķ\": \"K\",\n  \"ķ\": \"k\",\n  \"Ḱ\": \"K\",\n  \"ḱ\": \"k\",\n  \"K̆\": \"K\",\n  \"k̆\": \"k\",\n  \"Ĺ\": \"L\",\n  \"ĺ\": \"l\",\n  \"Ļ\": \"L\",\n  \"ļ\": \"l\",\n  \"Ľ\": \"L\",\n  \"ľ\": \"l\",\n  \"Ŀ\": \"L\",\n  \"ŀ\": \"l\",\n  \"Ł\": \"l\",\n  \"ł\": \"l\",\n  \"Ḿ\": \"M\",\n  \"ḿ\": \"m\",\n  \"M̆\": \"M\",\n  \"m̆\": \"m\",\n  \"Ń\": \"N\",\n  \"ń\": \"n\",\n  \"Ņ\": \"N\",\n  \"ņ\": \"n\",\n  \"Ň\": \"N\",\n  \"ň\": \"n\",\n  \"ŉ\": \"n\",\n  \"N̆\": \"N\",\n  \"n̆\": \"n\",\n  \"Ō\": \"O\",\n  \"ō\": \"o\",\n  \"Ŏ\": \"O\",\n  \"ŏ\": \"o\",\n  \"Ő\": \"O\",\n  \"ő\": \"o\",\n  \"Œ\": \"OE\",\n  \"œ\": \"oe\",\n  \"P̆\": \"P\",\n  \"p̆\": \"p\",\n  \"Ŕ\": \"R\",\n  \"ŕ\": \"r\",\n  \"Ŗ\": \"R\",\n  \"ŗ\": \"r\",\n  \"Ř\": \"R\",\n  \"ř\": \"r\",\n  \"R̆\": \"R\",\n  \"r̆\": \"r\",\n  \"Ȓ\": \"R\",\n  \"ȓ\": \"r\",\n  \"Ś\": \"S\",\n  \"ś\": \"s\",\n  \"Ŝ\": \"S\",\n  \"ŝ\": \"s\",\n  \"Ş\": \"S\",\n  \"Ș\": \"S\",\n  \"ș\": \"s\",\n  \"ş\": \"s\",\n  \"Š\": \"S\",\n  \"š\": \"s\",\n  \"Ţ\": \"T\",\n  \"ţ\": \"t\",\n  \"ț\": \"t\",\n  \"Ț\": \"T\",\n  \"Ť\": \"T\",\n  \"ť\": \"t\",\n  \"Ŧ\": \"T\",\n  \"ŧ\": \"t\",\n  \"T̆\": \"T\",\n  \"t̆\": \"t\",\n  \"Ũ\": \"U\",\n  \"ũ\": \"u\",\n  \"Ū\": \"U\",\n  \"ū\": \"u\",\n  \"Ŭ\": \"U\",\n  \"ŭ\": \"u\",\n  \"Ů\": \"U\",\n  \"ů\": \"u\",\n  \"Ű\": \"U\",\n  \"ű\": \"u\",\n  \"Ų\": \"U\",\n  \"ų\": \"u\",\n  \"Ȗ\": \"U\",\n  \"ȗ\": \"u\",\n  \"V̆\": \"V\",\n  \"v̆\": \"v\",\n  \"Ŵ\": \"W\",\n  \"ŵ\": \"w\",\n  \"Ẃ\": \"W\",\n  \"ẃ\": \"w\",\n  \"X̆\": \"X\",\n  \"x̆\": \"x\",\n  \"Ŷ\": \"Y\",\n  \"ŷ\": \"y\",\n  \"Ÿ\": \"Y\",\n  \"Y̆\": \"Y\",\n  \"y̆\": \"y\",\n  \"Ź\": \"Z\",\n  \"ź\": \"z\",\n  \"Ż\": \"Z\",\n  \"ż\": \"z\",\n  \"Ž\": \"Z\",\n  \"ž\": \"z\",\n  \"ſ\": \"s\",\n  \"ƒ\": \"f\",\n  \"Ơ\": \"O\",\n  \"ơ\": \"o\",\n  \"Ư\": \"U\",\n  \"ư\": \"u\",\n  \"Ǎ\": \"A\",\n  \"ǎ\": \"a\",\n  \"Ǐ\": \"I\",\n  \"ǐ\": \"i\",\n  \"Ǒ\": \"O\",\n  \"ǒ\": \"o\",\n  \"Ǔ\": \"U\",\n  \"ǔ\": \"u\",\n  \"Ǖ\": \"U\",\n  \"ǖ\": \"u\",\n  \"Ǘ\": \"U\",\n  \"ǘ\": \"u\",\n  \"Ǚ\": \"U\",\n  \"ǚ\": \"u\",\n  \"Ǜ\": \"U\",\n  \"ǜ\": \"u\",\n  \"Ứ\": \"U\",\n  \"ứ\": \"u\",\n  \"Ṹ\": \"U\",\n  \"ṹ\": \"u\",\n  \"Ǻ\": \"A\",\n  \"ǻ\": \"a\",\n  \"Ǽ\": \"AE\",\n  \"ǽ\": \"ae\",\n  \"Ǿ\": \"O\",\n  \"ǿ\": \"o\",\n  \"Þ\": \"TH\",\n  \"þ\": \"th\",\n  \"Ṕ\": \"P\",\n  \"ṕ\": \"p\",\n  \"Ṥ\": \"S\",\n  \"ṥ\": \"s\",\n  \"X́\": \"X\",\n  \"x́\": \"x\",\n  \"Ѓ\": \"Г\",\n  \"ѓ\": \"г\",\n  \"Ќ\": \"К\",\n  \"ќ\": \"к\",\n  \"A̋\": \"A\",\n  \"a̋\": \"a\",\n  \"E̋\": \"E\",\n  \"e̋\": \"e\",\n  \"I̋\": \"I\",\n  \"i̋\": \"i\",\n  \"Ǹ\": \"N\",\n  \"ǹ\": \"n\",\n  \"Ồ\": \"O\",\n  \"ồ\": \"o\",\n  \"Ṑ\": \"O\",\n  \"ṑ\": \"o\",\n  \"Ừ\": \"U\",\n  \"ừ\": \"u\",\n  \"Ẁ\": \"W\",\n  \"ẁ\": \"w\",\n  \"Ỳ\": \"Y\",\n  \"ỳ\": \"y\",\n  \"Ȁ\": \"A\",\n  \"ȁ\": \"a\",\n  \"Ȅ\": \"E\",\n  \"ȅ\": \"e\",\n  \"Ȉ\": \"I\",\n  \"ȉ\": \"i\",\n  \"Ȍ\": \"O\",\n  \"ȍ\": \"o\",\n  \"Ȑ\": \"R\",\n  \"ȑ\": \"r\",\n  \"Ȕ\": \"U\",\n  \"ȕ\": \"u\",\n  \"B̌\": \"B\",\n  \"b̌\": \"b\",\n  \"Č̣\": \"C\",\n  \"č̣\": \"c\",\n  \"Ê̌\": \"E\",\n  \"ê̌\": \"e\",\n  \"F̌\": \"F\",\n  \"f̌\": \"f\",\n  \"Ǧ\": \"G\",\n  \"ǧ\": \"g\",\n  \"Ȟ\": \"H\",\n  \"ȟ\": \"h\",\n  \"J̌\": \"J\",\n  \"ǰ\": \"j\",\n  \"Ǩ\": \"K\",\n  \"ǩ\": \"k\",\n  \"M̌\": \"M\",\n  \"m̌\": \"m\",\n  \"P̌\": \"P\",\n  \"p̌\": \"p\",\n  \"Q̌\": \"Q\",\n  \"q̌\": \"q\",\n  \"Ř̩\": \"R\",\n  \"ř̩\": \"r\",\n  \"Ṧ\": \"S\",\n  \"ṧ\": \"s\",\n  \"V̌\": \"V\",\n  \"v̌\": \"v\",\n  \"W̌\": \"W\",\n  \"w̌\": \"w\",\n  \"X̌\": \"X\",\n  \"x̌\": \"x\",\n  \"Y̌\": \"Y\",\n  \"y̌\": \"y\",\n  \"A̧\": \"A\",\n  \"a̧\": \"a\",\n  \"B̧\": \"B\",\n  \"b̧\": \"b\",\n  \"Ḑ\": \"D\",\n  \"ḑ\": \"d\",\n  \"Ȩ\": \"E\",\n  \"ȩ\": \"e\",\n  \"Ɛ̧\": \"E\",\n  \"ɛ̧\": \"e\",\n  \"Ḩ\": \"H\",\n  \"ḩ\": \"h\",\n  \"I̧\": \"I\",\n  \"i̧\": \"i\",\n  \"Ɨ̧\": \"I\",\n  \"ɨ̧\": \"i\",\n  \"M̧\": \"M\",\n  \"m̧\": \"m\",\n  \"O̧\": \"O\",\n  \"o̧\": \"o\",\n  \"Q̧\": \"Q\",\n  \"q̧\": \"q\",\n  \"U̧\": \"U\",\n  \"u̧\": \"u\",\n  \"X̧\": \"X\",\n  \"x̧\": \"x\",\n  \"Z̧\": \"Z\",\n  \"z̧\": \"z\"\n};\nvar chars = Object.keys(characterMap).join('|');\nvar allAccents = new RegExp(chars, 'g');\nvar firstAccent = new RegExp(chars, '');\n\nvar removeAccents = function (string) {\n  return string.replace(allAccents, function (match) {\n    return characterMap[match];\n  });\n};\n\nvar hasAccents = function (string) {\n  return !!string.match(firstAccent);\n};\n\nvar removeAccents_1 = removeAccents;\nvar has = hasAccents;\nvar remove = removeAccents;\nremoveAccents_1.has = has;\nremoveAccents_1.remove = remove;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2017 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\n\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 9,\n  EQUAL: 8,\n  STARTS_WITH: 7,\n  WORD_STARTS_WITH: 6,\n  STRING_CASE: 5,\n  STRING_CASE_ACRONYM: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nvar caseRankings = {\n  CAMEL: 0.8,\n  PASCAL: 0.6,\n  KEBAB: 0.4,\n  SNAKE: 0.2,\n  NO_CASE: 0\n};\nmatchSorter.rankings = rankings;\nmatchSorter.caseRankings = caseRankings;\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // not performing any search/sort if value(search term) is empty\n\n  if (!value) return items;\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n  var matchedItems = items.reduce(function (matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rankedItem = _getHighestRanking.rankedItem,\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex,\n        _getHighestRanking$ke = _getHighestRanking.keyThreshold,\n        keyThreshold = _getHighestRanking$ke === undefined ? threshold : _getHighestRanking$ke;\n\n    if (rank >= keyThreshold) {\n      matches.push({\n        rankedItem: rankedItem,\n        item: item,\n        rank: rank,\n        index: index,\n        keyIndex: keyIndex\n      });\n    }\n\n    return matches;\n  }, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedItem: item,\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n    }\n\n    return {\n      rankedItem: itemValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 12] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  var caseRank = getCaseRanking(testString);\n  var isPartial = isPartialOfCase(testString, stringToRank, caseRank);\n  var isCasedAcronym = isCaseAcronym(testString, stringToRank, caseRank); // Lower casing before further comparison\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL + caseRank;\n  } // starts with\n\n\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH + caseRank;\n  } // word starts with\n\n\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH + caseRank;\n  } // is a part inside a cased string\n\n\n  if (isPartial) {\n    return rankings.STRING_CASE + caseRank;\n  } // is acronym for a cased string\n\n\n  if (caseRank > 0 && isCasedAcronym) {\n    return rankings.STRING_CASE_ACRONYM + caseRank;\n  } // contains\n\n\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS + caseRank;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM + caseRank;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score base on the case of the testString\n * @param {String} testString - the string to test against\n * @returns {Number} the number of the ranking,\n * based on the case between 0 and 1 for how the testString matches the case\n */\n\n\nfunction getCaseRanking(testString) {\n  var containsUpperCase = testString.toLowerCase() !== testString;\n  var containsDash = testString.indexOf('-') >= 0;\n  var containsUnderscore = testString.indexOf('_') >= 0;\n\n  if (!containsUpperCase && !containsUnderscore && containsDash) {\n    return caseRankings.KEBAB;\n  }\n\n  if (!containsUpperCase && containsUnderscore && !containsDash) {\n    return caseRankings.SNAKE;\n  }\n\n  if (containsUpperCase && !containsDash && !containsUnderscore) {\n    var startsWithUpperCase = testString[0].toUpperCase() === testString[0];\n\n    if (startsWithUpperCase) {\n      return caseRankings.PASCAL;\n    }\n\n    return caseRankings.CAMEL;\n  }\n\n  return caseRankings.NO_CASE;\n}\n/**\n * Returns whether the stringToRank is one of the case parts in the testString (works with any string case)\n * @example\n * // returns true\n * isPartialOfCase('helloWorld', 'world', caseRankings.CAMEL)\n * @example\n * // returns false\n * isPartialOfCase('helloWorld', 'oworl', caseRankings.CAMEL)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Number} caseRanking - the ranking score based on case of testString\n * @returns {Boolean} whether the stringToRank is one of the case parts in the testString\n */\n\n\nfunction isPartialOfCase(testString, stringToRank, caseRanking) {\n  var testIndex = testString.toLowerCase().indexOf(stringToRank.toLowerCase());\n\n  switch (caseRanking) {\n    case caseRankings.SNAKE:\n      return testString[testIndex - 1] === '_';\n\n    case caseRankings.KEBAB:\n      return testString[testIndex - 1] === '-';\n\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      return testIndex !== -1 && testString[testIndex] === testString[testIndex].toUpperCase();\n\n    default:\n      return false;\n  }\n}\n/**\n * Check if stringToRank is an acronym for a partial case\n * @example\n * // returns true\n * isCaseAcronym('super_duper_file', 'sdf', caseRankings.SNAKE)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the acronym to test\n * @param {Number} caseRank - the ranking of the case\n * @returns {Boolean} whether the stringToRank is an acronym for the testString\n */\n\n\nfunction isCaseAcronym(testString, stringToRank, caseRank) {\n  var splitValue = null;\n\n  switch (caseRank) {\n    case caseRankings.SNAKE:\n      splitValue = '_';\n      break;\n\n    case caseRankings.KEBAB:\n      splitValue = '-';\n      break;\n\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      splitValue = /(?=[A-Z])/;\n      break;\n\n    default:\n      splitValue = null;\n  }\n\n  var splitTestString = testString.split(splitValue);\n  return stringToRank.toLowerCase().split('').reduce(function (correct, char, charIndex) {\n    var splitItem = splitTestString[charIndex];\n    return correct && splitItem && splitItem[0].toLowerCase() === char;\n  }, true);\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * (1 / spread);\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\n\n\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRankedItem = a.rankedItem,\n      aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRankedItem = b.rankedItem,\n      bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n\n  if (aRank === bRank) {\n    if (aKeyIndex === bKeyIndex) {\n      return String(aRankedItem).localeCompare(bRankedItem);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  value = '' + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents_1(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n\n  var value = void 0;\n\n  if (typeof key === 'function') {\n    value = key(item); // eslint-disable-next-line no-negated-condition\n  } else if (key.indexOf('.') !== -1) {\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj ? itemObj[nestedKey] : null;\n    }, item);\n  } else {\n    value = item[key];\n  } // concat because `value` can be a string or an array\n  // eslint-disable-next-line\n\n\n  return value != null ? [].concat(value) : null;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n\n    return allVals;\n  }, []);\n}\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\n\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = {\n      key: key\n    };\n  }\n\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n}\n\nexport default matchSorter;\nexport { rankings };","map":{"version":3,"sources":["/home/guswawan/dev/arka/fe-hiringchannel/node_modules/match-sorter/dist/match-sorter.esm.js"],"names":["characterMap","chars","Object","keys","join","allAccents","RegExp","firstAccent","removeAccents","string","replace","match","hasAccents","removeAccents_1","has","remove","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","STRING_CASE","STRING_CASE_ACRONYM","CONTAINS","ACRONYM","MATCHES","NO_MATCH","caseRankings","CAMEL","PASCAL","KEBAB","SNAKE","NO_CASE","matchSorter","items","value","options","undefined","_options$threshold","threshold","matchedItems","reduce","matches","item","index","_getHighestRanking","getHighestRanking","rankedItem","rank","keyIndex","_getHighestRanking$ke","keyThreshold","push","sort","sortRankedItems","map","_ref","getMatchRanking","valuesToRank","getAllValuesToRank","_ref2","_ref3","itemValue","attributes","newRank","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","caseRank","getCaseRanking","isPartial","isPartialOfCase","isCasedAcronym","isCaseAcronym","toLowerCase","indexOf","getAcronym","getClosenessRanking","acronym","wordsInString","split","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","containsUpperCase","containsDash","containsUnderscore","startsWithUpperCase","toUpperCase","caseRanking","testIndex","splitValue","splitTestString","correct","char","charIndex","splitItem","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","j","stringChar","getRanking","spread","inOrderPercentage","ranking","firstIndex","found","a","b","aFirst","bFirst","aRankedItem","aRank","aKeyIndex","bRankedItem","bRank","bKeyIndex","String","localeCompare","_ref4","keepDiacritics","getItemValues","itemObj","nestedKey","concat","allVals","values","getKeyAttributes","Infinity"],"mappings":"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","sourcesContent":["var characterMap = {\r\n\t\"À\": \"A\",\r\n\t\"Á\": \"A\",\r\n\t\"Â\": \"A\",\r\n\t\"Ã\": \"A\",\r\n\t\"Ä\": \"A\",\r\n\t\"Å\": \"A\",\r\n\t\"Ấ\": \"A\",\r\n\t\"Ắ\": \"A\",\r\n\t\"Ẳ\": \"A\",\r\n\t\"Ẵ\": \"A\",\r\n\t\"Ặ\": \"A\",\r\n\t\"Æ\": \"AE\",\r\n\t\"Ầ\": \"A\",\r\n\t\"Ằ\": \"A\",\r\n\t\"Ȃ\": \"A\",\r\n\t\"Ç\": \"C\",\r\n\t\"Ḉ\": \"C\",\r\n\t\"È\": \"E\",\r\n\t\"É\": \"E\",\r\n\t\"Ê\": \"E\",\r\n\t\"Ë\": \"E\",\r\n\t\"Ế\": \"E\",\r\n\t\"Ḗ\": \"E\",\r\n\t\"Ề\": \"E\",\r\n\t\"Ḕ\": \"E\",\r\n\t\"Ḝ\": \"E\",\r\n\t\"Ȇ\": \"E\",\r\n\t\"Ì\": \"I\",\r\n\t\"Í\": \"I\",\r\n\t\"Î\": \"I\",\r\n\t\"Ï\": \"I\",\r\n\t\"Ḯ\": \"I\",\r\n\t\"Ȋ\": \"I\",\r\n\t\"Ð\": \"D\",\r\n\t\"Ñ\": \"N\",\r\n\t\"Ò\": \"O\",\r\n\t\"Ó\": \"O\",\r\n\t\"Ô\": \"O\",\r\n\t\"Õ\": \"O\",\r\n\t\"Ö\": \"O\",\r\n\t\"Ø\": \"O\",\r\n\t\"Ố\": \"O\",\r\n\t\"Ṍ\": \"O\",\r\n\t\"Ṓ\": \"O\",\r\n\t\"Ȏ\": \"O\",\r\n\t\"Ù\": \"U\",\r\n\t\"Ú\": \"U\",\r\n\t\"Û\": \"U\",\r\n\t\"Ü\": \"U\",\r\n\t\"Ý\": \"Y\",\r\n\t\"à\": \"a\",\r\n\t\"á\": \"a\",\r\n\t\"â\": \"a\",\r\n\t\"ã\": \"a\",\r\n\t\"ä\": \"a\",\r\n\t\"å\": \"a\",\r\n\t\"ấ\": \"a\",\r\n\t\"ắ\": \"a\",\r\n\t\"ẳ\": \"a\",\r\n\t\"ẵ\": \"a\",\r\n\t\"ặ\": \"a\",\r\n\t\"æ\": \"ae\",\r\n\t\"ầ\": \"a\",\r\n\t\"ằ\": \"a\",\r\n\t\"ȃ\": \"a\",\r\n\t\"ç\": \"c\",\r\n\t\"ḉ\": \"c\",\r\n\t\"è\": \"e\",\r\n\t\"é\": \"e\",\r\n\t\"ê\": \"e\",\r\n\t\"ë\": \"e\",\r\n\t\"ế\": \"e\",\r\n\t\"ḗ\": \"e\",\r\n\t\"ề\": \"e\",\r\n\t\"ḕ\": \"e\",\r\n\t\"ḝ\": \"e\",\r\n\t\"ȇ\": \"e\",\r\n\t\"ì\": \"i\",\r\n\t\"í\": \"i\",\r\n\t\"î\": \"i\",\r\n\t\"ï\": \"i\",\r\n\t\"ḯ\": \"i\",\r\n\t\"ȋ\": \"i\",\r\n\t\"ð\": \"d\",\r\n\t\"ñ\": \"n\",\r\n\t\"ò\": \"o\",\r\n\t\"ó\": \"o\",\r\n\t\"ô\": \"o\",\r\n\t\"õ\": \"o\",\r\n\t\"ö\": \"o\",\r\n\t\"ø\": \"o\",\r\n\t\"ố\": \"o\",\r\n\t\"ṍ\": \"o\",\r\n\t\"ṓ\": \"o\",\r\n\t\"ȏ\": \"o\",\r\n\t\"ù\": \"u\",\r\n\t\"ú\": \"u\",\r\n\t\"û\": \"u\",\r\n\t\"ü\": \"u\",\r\n\t\"ý\": \"y\",\r\n\t\"ÿ\": \"y\",\r\n\t\"Ā\": \"A\",\r\n\t\"ā\": \"a\",\r\n\t\"Ă\": \"A\",\r\n\t\"ă\": \"a\",\r\n\t\"Ą\": \"A\",\r\n\t\"ą\": \"a\",\r\n\t\"Ć\": \"C\",\r\n\t\"ć\": \"c\",\r\n\t\"Ĉ\": \"C\",\r\n\t\"ĉ\": \"c\",\r\n\t\"Ċ\": \"C\",\r\n\t\"ċ\": \"c\",\r\n\t\"Č\": \"C\",\r\n\t\"č\": \"c\",\r\n\t\"C̆\": \"C\",\r\n\t\"c̆\": \"c\",\r\n\t\"Ď\": \"D\",\r\n\t\"ď\": \"d\",\r\n\t\"Đ\": \"D\",\r\n\t\"đ\": \"d\",\r\n\t\"Ē\": \"E\",\r\n\t\"ē\": \"e\",\r\n\t\"Ĕ\": \"E\",\r\n\t\"ĕ\": \"e\",\r\n\t\"Ė\": \"E\",\r\n\t\"ė\": \"e\",\r\n\t\"Ę\": \"E\",\r\n\t\"ę\": \"e\",\r\n\t\"Ě\": \"E\",\r\n\t\"ě\": \"e\",\r\n\t\"Ĝ\": \"G\",\r\n\t\"Ǵ\": \"G\",\r\n\t\"ĝ\": \"g\",\r\n\t\"ǵ\": \"g\",\r\n\t\"Ğ\": \"G\",\r\n\t\"ğ\": \"g\",\r\n\t\"Ġ\": \"G\",\r\n\t\"ġ\": \"g\",\r\n\t\"Ģ\": \"G\",\r\n\t\"ģ\": \"g\",\r\n\t\"Ĥ\": \"H\",\r\n\t\"ĥ\": \"h\",\r\n\t\"Ħ\": \"H\",\r\n\t\"ħ\": \"h\",\r\n\t\"Ḫ\": \"H\",\r\n\t\"ḫ\": \"h\",\r\n\t\"Ĩ\": \"I\",\r\n\t\"ĩ\": \"i\",\r\n\t\"Ī\": \"I\",\r\n\t\"ī\": \"i\",\r\n\t\"Ĭ\": \"I\",\r\n\t\"ĭ\": \"i\",\r\n\t\"Į\": \"I\",\r\n\t\"į\": \"i\",\r\n\t\"İ\": \"I\",\r\n\t\"ı\": \"i\",\r\n\t\"Ĳ\": \"IJ\",\r\n\t\"ĳ\": \"ij\",\r\n\t\"Ĵ\": \"J\",\r\n\t\"ĵ\": \"j\",\r\n\t\"Ķ\": \"K\",\r\n\t\"ķ\": \"k\",\r\n\t\"Ḱ\": \"K\",\r\n\t\"ḱ\": \"k\",\r\n\t\"K̆\": \"K\",\r\n\t\"k̆\": \"k\",\r\n\t\"Ĺ\": \"L\",\r\n\t\"ĺ\": \"l\",\r\n\t\"Ļ\": \"L\",\r\n\t\"ļ\": \"l\",\r\n\t\"Ľ\": \"L\",\r\n\t\"ľ\": \"l\",\r\n\t\"Ŀ\": \"L\",\r\n\t\"ŀ\": \"l\",\r\n\t\"Ł\": \"l\",\r\n\t\"ł\": \"l\",\r\n\t\"Ḿ\": \"M\",\r\n\t\"ḿ\": \"m\",\r\n\t\"M̆\": \"M\",\r\n\t\"m̆\": \"m\",\r\n\t\"Ń\": \"N\",\r\n\t\"ń\": \"n\",\r\n\t\"Ņ\": \"N\",\r\n\t\"ņ\": \"n\",\r\n\t\"Ň\": \"N\",\r\n\t\"ň\": \"n\",\r\n\t\"ŉ\": \"n\",\r\n\t\"N̆\": \"N\",\r\n\t\"n̆\": \"n\",\r\n\t\"Ō\": \"O\",\r\n\t\"ō\": \"o\",\r\n\t\"Ŏ\": \"O\",\r\n\t\"ŏ\": \"o\",\r\n\t\"Ő\": \"O\",\r\n\t\"ő\": \"o\",\r\n\t\"Œ\": \"OE\",\r\n\t\"œ\": \"oe\",\r\n\t\"P̆\": \"P\",\r\n\t\"p̆\": \"p\",\r\n\t\"Ŕ\": \"R\",\r\n\t\"ŕ\": \"r\",\r\n\t\"Ŗ\": \"R\",\r\n\t\"ŗ\": \"r\",\r\n\t\"Ř\": \"R\",\r\n\t\"ř\": \"r\",\r\n\t\"R̆\": \"R\",\r\n\t\"r̆\": \"r\",\r\n\t\"Ȓ\": \"R\",\r\n\t\"ȓ\": \"r\",\r\n\t\"Ś\": \"S\",\r\n\t\"ś\": \"s\",\r\n\t\"Ŝ\": \"S\",\r\n\t\"ŝ\": \"s\",\r\n\t\"Ş\": \"S\",\r\n\t\"Ș\": \"S\",\r\n\t\"ș\": \"s\",\r\n\t\"ş\": \"s\",\r\n\t\"Š\": \"S\",\r\n\t\"š\": \"s\",\r\n\t\"Ţ\": \"T\",\r\n\t\"ţ\": \"t\",\r\n\t\"ț\": \"t\",\r\n\t\"Ț\": \"T\",\r\n\t\"Ť\": \"T\",\r\n\t\"ť\": \"t\",\r\n\t\"Ŧ\": \"T\",\r\n\t\"ŧ\": \"t\",\r\n\t\"T̆\": \"T\",\r\n\t\"t̆\": \"t\",\r\n\t\"Ũ\": \"U\",\r\n\t\"ũ\": \"u\",\r\n\t\"Ū\": \"U\",\r\n\t\"ū\": \"u\",\r\n\t\"Ŭ\": \"U\",\r\n\t\"ŭ\": \"u\",\r\n\t\"Ů\": \"U\",\r\n\t\"ů\": \"u\",\r\n\t\"Ű\": \"U\",\r\n\t\"ű\": \"u\",\r\n\t\"Ų\": \"U\",\r\n\t\"ų\": \"u\",\r\n\t\"Ȗ\": \"U\",\r\n\t\"ȗ\": \"u\",\r\n\t\"V̆\": \"V\",\r\n\t\"v̆\": \"v\",\r\n\t\"Ŵ\": \"W\",\r\n\t\"ŵ\": \"w\",\r\n\t\"Ẃ\": \"W\",\r\n\t\"ẃ\": \"w\",\r\n\t\"X̆\": \"X\",\r\n\t\"x̆\": \"x\",\r\n\t\"Ŷ\": \"Y\",\r\n\t\"ŷ\": \"y\",\r\n\t\"Ÿ\": \"Y\",\r\n\t\"Y̆\": \"Y\",\r\n\t\"y̆\": \"y\",\r\n\t\"Ź\": \"Z\",\r\n\t\"ź\": \"z\",\r\n\t\"Ż\": \"Z\",\r\n\t\"ż\": \"z\",\r\n\t\"Ž\": \"Z\",\r\n\t\"ž\": \"z\",\r\n\t\"ſ\": \"s\",\r\n\t\"ƒ\": \"f\",\r\n\t\"Ơ\": \"O\",\r\n\t\"ơ\": \"o\",\r\n\t\"Ư\": \"U\",\r\n\t\"ư\": \"u\",\r\n\t\"Ǎ\": \"A\",\r\n\t\"ǎ\": \"a\",\r\n\t\"Ǐ\": \"I\",\r\n\t\"ǐ\": \"i\",\r\n\t\"Ǒ\": \"O\",\r\n\t\"ǒ\": \"o\",\r\n\t\"Ǔ\": \"U\",\r\n\t\"ǔ\": \"u\",\r\n\t\"Ǖ\": \"U\",\r\n\t\"ǖ\": \"u\",\r\n\t\"Ǘ\": \"U\",\r\n\t\"ǘ\": \"u\",\r\n\t\"Ǚ\": \"U\",\r\n\t\"ǚ\": \"u\",\r\n\t\"Ǜ\": \"U\",\r\n\t\"ǜ\": \"u\",\r\n\t\"Ứ\": \"U\",\r\n\t\"ứ\": \"u\",\r\n\t\"Ṹ\": \"U\",\r\n\t\"ṹ\": \"u\",\r\n\t\"Ǻ\": \"A\",\r\n\t\"ǻ\": \"a\",\r\n\t\"Ǽ\": \"AE\",\r\n\t\"ǽ\": \"ae\",\r\n\t\"Ǿ\": \"O\",\r\n\t\"ǿ\": \"o\",\r\n\t\"Þ\": \"TH\",\r\n\t\"þ\": \"th\",\r\n\t\"Ṕ\": \"P\",\r\n\t\"ṕ\": \"p\",\r\n\t\"Ṥ\": \"S\",\r\n\t\"ṥ\": \"s\",\r\n\t\"X́\": \"X\",\r\n\t\"x́\": \"x\",\r\n\t\"Ѓ\": \"Г\",\r\n\t\"ѓ\": \"г\",\r\n\t\"Ќ\": \"К\",\r\n\t\"ќ\": \"к\",\r\n\t\"A̋\": \"A\",\r\n\t\"a̋\": \"a\",\r\n\t\"E̋\": \"E\",\r\n\t\"e̋\": \"e\",\r\n\t\"I̋\": \"I\",\r\n\t\"i̋\": \"i\",\r\n\t\"Ǹ\": \"N\",\r\n\t\"ǹ\": \"n\",\r\n\t\"Ồ\": \"O\",\r\n\t\"ồ\": \"o\",\r\n\t\"Ṑ\": \"O\",\r\n\t\"ṑ\": \"o\",\r\n\t\"Ừ\": \"U\",\r\n\t\"ừ\": \"u\",\r\n\t\"Ẁ\": \"W\",\r\n\t\"ẁ\": \"w\",\r\n\t\"Ỳ\": \"Y\",\r\n\t\"ỳ\": \"y\",\r\n\t\"Ȁ\": \"A\",\r\n\t\"ȁ\": \"a\",\r\n\t\"Ȅ\": \"E\",\r\n\t\"ȅ\": \"e\",\r\n\t\"Ȉ\": \"I\",\r\n\t\"ȉ\": \"i\",\r\n\t\"Ȍ\": \"O\",\r\n\t\"ȍ\": \"o\",\r\n\t\"Ȑ\": \"R\",\r\n\t\"ȑ\": \"r\",\r\n\t\"Ȕ\": \"U\",\r\n\t\"ȕ\": \"u\",\r\n\t\"B̌\": \"B\",\r\n\t\"b̌\": \"b\",\r\n\t\"Č̣\": \"C\",\r\n\t\"č̣\": \"c\",\r\n\t\"Ê̌\": \"E\",\r\n\t\"ê̌\": \"e\",\r\n\t\"F̌\": \"F\",\r\n\t\"f̌\": \"f\",\r\n\t\"Ǧ\": \"G\",\r\n\t\"ǧ\": \"g\",\r\n\t\"Ȟ\": \"H\",\r\n\t\"ȟ\": \"h\",\r\n\t\"J̌\": \"J\",\r\n\t\"ǰ\": \"j\",\r\n\t\"Ǩ\": \"K\",\r\n\t\"ǩ\": \"k\",\r\n\t\"M̌\": \"M\",\r\n\t\"m̌\": \"m\",\r\n\t\"P̌\": \"P\",\r\n\t\"p̌\": \"p\",\r\n\t\"Q̌\": \"Q\",\r\n\t\"q̌\": \"q\",\r\n\t\"Ř̩\": \"R\",\r\n\t\"ř̩\": \"r\",\r\n\t\"Ṧ\": \"S\",\r\n\t\"ṧ\": \"s\",\r\n\t\"V̌\": \"V\",\r\n\t\"v̌\": \"v\",\r\n\t\"W̌\": \"W\",\r\n\t\"w̌\": \"w\",\r\n\t\"X̌\": \"X\",\r\n\t\"x̌\": \"x\",\r\n\t\"Y̌\": \"Y\",\r\n\t\"y̌\": \"y\",\r\n\t\"A̧\": \"A\",\r\n\t\"a̧\": \"a\",\r\n\t\"B̧\": \"B\",\r\n\t\"b̧\": \"b\",\r\n\t\"Ḑ\": \"D\",\r\n\t\"ḑ\": \"d\",\r\n\t\"Ȩ\": \"E\",\r\n\t\"ȩ\": \"e\",\r\n\t\"Ɛ̧\": \"E\",\r\n\t\"ɛ̧\": \"e\",\r\n\t\"Ḩ\": \"H\",\r\n\t\"ḩ\": \"h\",\r\n\t\"I̧\": \"I\",\r\n\t\"i̧\": \"i\",\r\n\t\"Ɨ̧\": \"I\",\r\n\t\"ɨ̧\": \"i\",\r\n\t\"M̧\": \"M\",\r\n\t\"m̧\": \"m\",\r\n\t\"O̧\": \"O\",\r\n\t\"o̧\": \"o\",\r\n\t\"Q̧\": \"Q\",\r\n\t\"q̧\": \"q\",\r\n\t\"U̧\": \"U\",\r\n\t\"u̧\": \"u\",\r\n\t\"X̧\": \"X\",\r\n\t\"x̧\": \"x\",\r\n\t\"Z̧\": \"Z\",\r\n\t\"z̧\": \"z\",\r\n};\r\n\r\nvar chars = Object.keys(characterMap).join('|');\r\nvar allAccents = new RegExp(chars, 'g');\r\nvar firstAccent = new RegExp(chars, '');\r\n\r\nvar removeAccents = function(string) {\t\r\n\treturn string.replace(allAccents, function(match) {\r\n\t\treturn characterMap[match];\r\n\t});\r\n};\r\n\r\nvar hasAccents = function(string) {\r\n\treturn !!string.match(firstAccent);\r\n};\r\n\r\nvar removeAccents_1 = removeAccents;\r\nvar has = hasAccents;\r\nvar remove = removeAccents;\nremoveAccents_1.has = has;\nremoveAccents_1.remove = remove;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2017 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 9,\n  EQUAL: 8,\n  STARTS_WITH: 7,\n  WORD_STARTS_WITH: 6,\n  STRING_CASE: 5,\n  STRING_CASE_ACRONYM: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\n\nvar caseRankings = {\n  CAMEL: 0.8,\n  PASCAL: 0.6,\n  KEBAB: 0.4,\n  SNAKE: 0.2,\n  NO_CASE: 0\n};\n\nmatchSorter.rankings = rankings;\nmatchSorter.caseRankings = caseRankings;\n\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // not performing any search/sort if value(search term) is empty\n  if (!value) return items;\n\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n\n  var matchedItems = items.reduce(function (matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rankedItem = _getHighestRanking.rankedItem,\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex,\n        _getHighestRanking$ke = _getHighestRanking.keyThreshold,\n        keyThreshold = _getHighestRanking$ke === undefined ? threshold : _getHighestRanking$ke;\n\n    if (rank >= keyThreshold) {\n      matches.push({ rankedItem: rankedItem, item: item, rank: rank, index: index, keyIndex: keyIndex });\n    }\n    return matches;\n  }, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n}\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedItem: item,\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n    }\n    return { rankedItem: itemValue, rank: rank, keyIndex: keyIndex, keyThreshold: keyThreshold };\n  }, { rank: rankings.NO_MATCH, keyIndex: -1, keyThreshold: options.threshold });\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 12] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options);\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  var caseRank = getCaseRanking(testString);\n  var isPartial = isPartialOfCase(testString, stringToRank, caseRank);\n  var isCasedAcronym = isCaseAcronym(testString, stringToRank, caseRank);\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase();\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL + caseRank;\n  }\n\n  // starts with\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH + caseRank;\n  }\n\n  // word starts with\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH + caseRank;\n  }\n\n  // is a part inside a cased string\n  if (isPartial) {\n    return rankings.STRING_CASE + caseRank;\n  }\n\n  // is acronym for a cased string\n  if (caseRank > 0 && isCasedAcronym) {\n    return rankings.STRING_CASE_ACRONYM + caseRank;\n  }\n\n  // contains\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS + caseRank;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  }\n\n  // acronym\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM + caseRank;\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank);\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n\n/**\n * Returns a score base on the case of the testString\n * @param {String} testString - the string to test against\n * @returns {Number} the number of the ranking,\n * based on the case between 0 and 1 for how the testString matches the case\n */\nfunction getCaseRanking(testString) {\n  var containsUpperCase = testString.toLowerCase() !== testString;\n  var containsDash = testString.indexOf('-') >= 0;\n  var containsUnderscore = testString.indexOf('_') >= 0;\n\n  if (!containsUpperCase && !containsUnderscore && containsDash) {\n    return caseRankings.KEBAB;\n  }\n\n  if (!containsUpperCase && containsUnderscore && !containsDash) {\n    return caseRankings.SNAKE;\n  }\n\n  if (containsUpperCase && !containsDash && !containsUnderscore) {\n    var startsWithUpperCase = testString[0].toUpperCase() === testString[0];\n    if (startsWithUpperCase) {\n      return caseRankings.PASCAL;\n    }\n\n    return caseRankings.CAMEL;\n  }\n\n  return caseRankings.NO_CASE;\n}\n\n/**\n * Returns whether the stringToRank is one of the case parts in the testString (works with any string case)\n * @example\n * // returns true\n * isPartialOfCase('helloWorld', 'world', caseRankings.CAMEL)\n * @example\n * // returns false\n * isPartialOfCase('helloWorld', 'oworl', caseRankings.CAMEL)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Number} caseRanking - the ranking score based on case of testString\n * @returns {Boolean} whether the stringToRank is one of the case parts in the testString\n */\nfunction isPartialOfCase(testString, stringToRank, caseRanking) {\n  var testIndex = testString.toLowerCase().indexOf(stringToRank.toLowerCase());\n\n  switch (caseRanking) {\n    case caseRankings.SNAKE:\n      return testString[testIndex - 1] === '_';\n    case caseRankings.KEBAB:\n      return testString[testIndex - 1] === '-';\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      return testIndex !== -1 && testString[testIndex] === testString[testIndex].toUpperCase();\n    default:\n      return false;\n  }\n}\n\n/**\n * Check if stringToRank is an acronym for a partial case\n * @example\n * // returns true\n * isCaseAcronym('super_duper_file', 'sdf', caseRankings.SNAKE)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the acronym to test\n * @param {Number} caseRank - the ranking of the case\n * @returns {Boolean} whether the stringToRank is an acronym for the testString\n */\nfunction isCaseAcronym(testString, stringToRank, caseRank) {\n  var splitValue = null;\n  switch (caseRank) {\n    case caseRankings.SNAKE:\n      splitValue = '_';\n      break;\n    case caseRankings.KEBAB:\n      splitValue = '-';\n      break;\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      splitValue = /(?=[A-Z])/;\n      break;\n    default:\n      splitValue = null;\n  }\n\n  var splitTestString = testString.split(splitValue);\n  return stringToRank.toLowerCase().split('').reduce(function (correct, char, charIndex) {\n    var splitItem = splitTestString[charIndex];\n    return correct && splitItem && splitItem[0].toLowerCase() === char;\n  }, true);\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n    return -1;\n  }\n  function getRanking(spread) {\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * (1 / spread);\n    return ranking;\n  }\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n  charNumber = firstIndex;\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRankedItem = a.rankedItem,\n      aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRankedItem = b.rankedItem,\n      bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n\n  if (aRank === bRank) {\n    if (aKeyIndex === bKeyIndex) {\n      return String(aRankedItem).localeCompare(bRankedItem);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n\n  value = '' + value; // toString\n  if (!keepDiacritics) {\n    value = removeAccents_1(value);\n  }\n  return value;\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n  var value = void 0;\n  if (typeof key === 'function') {\n    value = key(item);\n    // eslint-disable-next-line no-negated-condition\n  } else if (key.indexOf('.') !== -1) {\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj ? itemObj[nestedKey] : null;\n    }, item);\n  } else {\n    value = item[key];\n  }\n  // concat because `value` can be a string or an array\n  // eslint-disable-next-line\n  return value != null ? [].concat(value) : null;\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n    return allVals;\n  }, []);\n}\n\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = { key: key };\n  }\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n}\n\nexport default matchSorter;\nexport { rankings };\n"]},"metadata":{},"sourceType":"module"}